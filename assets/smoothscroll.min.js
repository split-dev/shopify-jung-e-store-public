(function() {
    "use strict";

    function isObject(val) {
        return val !== null && typeof val === "object";
    }

    function hasScrollBehaviorSupport() {
        return "scrollBehavior" in document.documentElement.style && window.__forceSmoothScrollPolyfill__ !== true;
    }

    function getScrollableElement(element) {
        return element instanceof window.HTMLElement || element instanceof window.Element
            ? element
            : document;
    }

    function isSmoothBehavior(options) {
        return options && isObject(options) && options.behavior === "smooth";
    }

    function polyfillScrollMethods() {
        var originalScroll = window.scroll || window.scrollTo;
        var originalScrollBy = window.scrollBy;
        var originalElementScroll = window.Element.prototype.scroll || function() {};

        window.scroll = window.scrollTo = function() {
            if (arguments[0]) {
                if (!isSmoothBehavior(arguments[0])) {
                    scrollToTopLeft(document.body, arguments[0].left || window.scrollX || window.pageXOffset, arguments[0].top || window.scrollY || window.pageYOffset);
                } else {
                    originalScroll.apply(window, arguments);
                }
            }
        };

        window.scrollBy = function() {
            if (arguments[0]) {
                if (isSmoothBehavior(arguments[0])) {
                    scrollToTopLeft(document.body, window.scrollX + (arguments[0].left || 0), window.scrollY + (arguments[0].top || 0));
                } else {
                    originalScrollBy.apply(window, arguments);
                }
            }
        };

        window.Element.prototype.scroll = window.Element.prototype.scrollTo = function() {
            if (arguments[0]) {
                if (!isSmoothBehavior(arguments[0])) {
                    var left = arguments[0].left || this.scrollLeft;
                    var top = arguments[0].top || this.scrollTop;
                    scrollToTopLeft(this, left, top);
                } else {
                    originalElementScroll.apply(this, arguments);
                }
            }
        };

        window.Element.prototype.scrollBy = function() {
            if (arguments[0]) {
                if (isSmoothBehavior(arguments[0])) {
                    this.scroll({
                        left: this.scrollLeft + (arguments[0].left || 0),
                        top: this.scrollTop + (arguments[0].top || 0),
                        behavior: arguments[0].behavior
                    });
                } else {
                    originalElementScroll.apply(this, arguments);
                }
            }
        };
    }

    function scrollToTopLeft(element, left, top) {
        var start = performance.now();
        var duration = 468;

        function step() {
            var time = (performance.now() - start) / duration;
            time = time > 1 ? 1 : time;

            var easing = 0.5 * (1 - Math.cos(Math.PI * time));
            var newX = startScrollLeft + (left - startScrollLeft) * easing;
            var newY = startScrollTop + (top - startScrollTop) * easing;

            element.scrollLeft = newX;
            element.scrollTop = newY;

            if (newX !== left || newY !== top) {
                requestAnimationFrame(step);
            }
        }

        var startScrollLeft = element.scrollLeft;
        var startScrollTop = element.scrollTop;

        step();
    }

    function hasSmoothScrollSupport() {
        return "scrollBehavior" in document.documentElement.style && window.performance && typeof window.performance.now === "function";
    }

    function isTridentOrEdge() {
        var userAgent = window.navigator.userAgent;
        return /MSIE|Trident\/|Edge\//.test(userAgent);
    }

    if (!hasSmoothScrollSupport() || isTridentOrEdge()) {
        polyfillScrollMethods();
    }

    if (typeof module !== "undefined" && typeof module.exports !== "undefined") {
        module.exports = { polyfill: polyfillScrollMethods };
    }
})();
